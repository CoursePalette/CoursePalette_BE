name: Course Palette Backend CI/CD # 워크플로우 이름 (GitHub Actions 탭에 표시됨)

on:
  push:
    branches: [ main ] # 'main' 브랜치에 push 이벤트가 발생했을 때 실행

jobs:
  build-and-deploy: # 작업(Job) ID
    runs-on: ubuntu-latest # 이 작업을 실행할 가상 환경 (GitHub 제공 Ubuntu 최신 버전)

    # 작업 전체에서 사용할 환경 변수 (선택 사항, secrets 직접 참조도 가능)
    # env:
    #   RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }} # 여기서 정의하면 아래 step들에서 env.RDS_ENDPOINT 로 사용 가능
    #   RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
    #   RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
    #   JWT_SECRET_PROD: ${{ secrets.JWT_SECRET_PROD }}

    steps: # 실제 작업 단계들
      # 1. 소스 코드 체크아웃: GitHub 저장소의 코드를 Runner 환경으로 가져옴
      - name: Checkout source code
        uses: actions/checkout@v4 # 미리 만들어진 Action 사용

      # 2. JDK 17 설정: Runner 환경에 Java 17 (Amazon Corretto) 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      # 3. Gradle Wrapper 실행 권한 부여: gradlew 파일에 실행 권한 추가 (Linux 환경 필수)
      - name: Grant execute permission for gradlew
        # working-directory: ./ # 프로젝트 루트에 gradlew가 있다면 기본값 './' 사용
        run: chmod +x gradlew

      # 4. Spring Boot 애플리케이션 빌드: Gradle을 사용하여 프로젝트 빌드 및 JAR 파일 생성
      - name: Build with Gradle
        # working-directory: ./
        # '-x test': 빌드 시 테스트 실행 제외 (배포 시간 단축 목적, CI 단계 분리 권장)
        run: ./gradlew build -x test

      # 5. 배포 준비: SSH 설정 (Runner -> EC2 접속 준비)
      - name: Setup SSH
        run: |
          # Runner 환경에 .ssh 디렉토리 생성
          mkdir -p ~/.ssh/
          # GitHub Secrets에 저장된 EC2 접속용 개인키를 Runner의 id_rsa 파일로 저장
          echo "${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          # 개인키 파일 권한 설정 (소유자만 읽기/쓰기)
          chmod 600 ~/.ssh/id_rsa
          # EC2 서버의 호스트 키를 Runner의 known_hosts 파일에 자동으로 추가 (최초 접속 시 확인 프롬프트 방지)
          ssh-keyscan ${{ secrets.AWS_EC2_HOST }} >> ~/.ssh/known_hosts

      # 6. EC2 서버에 배포 디렉토리 생성: EC2 서버에 JAR 파일을 저장할 디렉토리 생성 (이미 있어도 오류 없이 넘어감)
      - name: Create deploy directory on EC2
        run: ssh ${{ secrets.AWS_EC2_USERNAME }}@${{ secrets.AWS_EC2_HOST }} "mkdir -p /home/ec2-user/app"

      # 7. 빌드된 JAR 파일을 EC2 서버로 전송: Runner에 생성된 JAR 파일을 EC2 서버의 배포 디렉토리로 복사
      - name: Transfer JAR to EC2
        # scp [복사할 파일 경로] [EC2 사용자명]@[EC2 호스트]:[EC2 저장 경로]
        # ./build/libs/*.jar: 빌드 결과 JAR 파일 (이름 패턴 확인 필요!)
        # /home/ec2-user/app/: EC2 서버에 저장될 위치
        run: scp ./build/libs/*.jar ${{ secrets.AWS_EC2_USERNAME }}@${{ secrets.AWS_EC2_HOST }}:/home/ec2-user/app/

      # 8. EC2 서버에서 애플리케이션 재시작: EC2 서버에 접속하여 Systemd 서비스를 재시작 (최신 JAR 파일로 실행)
      - name: Restart application on EC2
        run: |
          ssh ${{ secrets.AWS_EC2_USERNAME }}@${{ secrets.AWS_EC2_HOST }} '
            sudo systemctl restart course-palette-app # 10단계에서 만들 Systemd 서비스 이름과 일치해야 함
          '
